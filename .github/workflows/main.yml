name: Deploy Terraform to Azure

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: 'Environment to deploy (e.g., dev, staging, prod)'
        required: true
        options:
          - dev
          - stage
          - prod
        default: 'dev'
      stacks_name:
        description: Name of the application stack to be deployed
        required: true
        default: policy_test

jobs:
  terraform_plan:
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
    defaults:
      run:
        working-directory: ./stacks/${{ inputs.stacks_name }}/examples/
        shell: bash

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7.5  # Use the latest stable version

      - name: Debug environment input
        run: echo "This is deploying in ${{ inputs.environment }}"

      - name: Determine Backend Config
        id: backend-config
        run: |
          if [ "${{ github.event.inputs.environment }}" != "prod" ]; then
            echo "config_file=app.nonprod" >> $GITHUB_ENV
            echo "This is non prod"
          else
            echo "config_file=prod" >> $GITHUB_ENV
            echo "This is Prod"
          fi

      - name: Initialize Terraform
        run: terraform init -reconfigure -backend-config="./config/${{ inputs.environment }}.config" -backend-config="./config/${{ env.config_file }}.config"

      - name: Validate Terraform
        run: terraform validate

      - name: Delete existing Terraform plan
        run: rm -f tfplan

      - name: Terraform Plan
        run: terraform plan -out=tfplan -var-file=${{ inputs.environment }}.tfvars

      - name: Save Terraform plan as artifact
        run: |
          ls -al
          mv tfplan $GITHUB_WORKSPACE/tfplan
          ls -al

      - name: Upload Terraform plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: tfplan


  terraform_apply:
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
    needs: terraform_plan
    environment: production  # Environment with required reviewers
    if: github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: ./stacks/${{ inputs.stacks_name }}/examples/
        shell: bash

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7.5  # Use the latest stable version

      - name: Verify downloaded Terraform plan (Before)
        run: ls -al

      - name: Retrieve Terraform plan artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan

      - name: Verify downloaded Terraform plan (After)
        run: ls -al

      - name: Copy Terraform plan to current directory
        run: cp $GITHUB_WORKSPACE/tfplan .

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
