resource "null_resource" "wait_for_eni_cleanup" {
  count = var.wait_for_eni_cleanup && var.vpc_config != null ? 1 : 0

  triggers = {
    canary_name = aws_synthetics_canary.this.name
  }

  provisioner "local-exec" {
    when    = destroy
    command = "bash ${path.module}/wait_for_eni_cleanup.sh ${aws_synthetics_canary.this.name}"
  }

  depends_on = [aws_synthetics_canary.this]
}


#!/bin/bash

set -euo pipefail

SG_ID="$1"
REGION=$(aws configure get region || echo "us-east-1")

echo "Looking for ENIs with Security Group ID: $SG_ID in $REGION"

MAX_ATTEMPTS=120
SLEEP_INTERVAL=10

for ((i=1; i<=MAX_ATTEMPTS; i++)); do
  ENI_IDS=$(aws ec2 describe-network-interfaces \
    --region "$REGION" \
    --filters Name=group-id,Values="$SG_ID" \
    --query "NetworkInterfaces[?Status!='available'].NetworkInterfaceId" \
    --output text)

  if [[ -z "$ENI_IDS" ]]; then
    echo "$(date '+%T') ✅ All ENIs are in 'available' state or already deleted."
    break
  else
    echo "$(date '+%T') ⏳ Attempt $i/$MAX_ATTEMPTS: Waiting for ENIs to be available. Still in-use: $ENI_IDS"
    sleep "$SLEEP_INTERVAL"
  fi
done

# Now delete available ENIs associated with the SG
AVAILABLE_ENIS=$(aws ec2 describe-network-interfaces \
  --region "$REGION" \
  --filters Name=group-id,Values="$SG_ID" Name=status,Values=available \
  --query "NetworkInterfaces[].NetworkInterfaceId" \
  --output text)

for eni in $AVAILABLE_ENIS; do
  echo "$(date '+%T') 🔥 Deleting ENI: $eni"
  aws ec2 delete-network-interface --network-interface-id "$eni" --region "$REGION"
done

echo "✅ Done: All ENIs deleted or in available state."
