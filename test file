resource "null_resource" "wait_for_eni_cleanup" {
  count = var.wait_for_eni_cleanup && var.vpc_config != null ? 1 : 0

  triggers = {
    canary_name = aws_synthetics_canary.this.name
  }

  provisioner "local-exec" {
    when    = destroy
    command = "bash ${path.module}/wait_for_eni_cleanup.sh ${aws_synthetics_canary.this.name}"
  }

  depends_on = [aws_synthetics_canary.this]
}



#!/bin/bash

set -e

CANARY_NAME="$1"
REGION="${AWS_REGION:-us-east-1}"
CONFIRM=${2:-false}

echo "üîç Looking for ENIs associated with canary '$CANARY_NAME' in region '$REGION'..."

# Find ENIs matching canary name in description
ENI_IDS=$(aws ec2 describe-network-interfaces \
  --filters "Name=description,Values=*${CANARY_NAME}*" \
  --region "$REGION" \
  --query 'NetworkInterfaces[*].NetworkInterfaceId' \
  --output text)

if [[ -z "$ENI_IDS" ]]; then
  echo "‚úÖ No ENIs found. Exiting."
  exit 0
fi

echo "üîé Found ENIs: $ENI_IDS"

if [[ "$CONFIRM" == "true" ]]; then
  echo "‚ö†Ô∏è  Proceed to wait for deletion of the above ENIs? (y/n)"
  read -r USER_CONFIRM
  if [[ "$USER_CONFIRM" != "y" ]]; then
    echo "‚ùå Cancelled by user."
    exit 1
  fi
fi

echo "‚è≥ Waiting for ENIs to be deleted..."

for i in {1..30}; do
  ENI_COUNT=$(aws ec2 describe-network-interfaces \
      --filters "Name=description,Values=*${CANARY_NAME}*" \
      --region "$REGION" \
      --query 'NetworkInterfaces[*].NetworkInterfaceId' \
      --output text | wc -w)

  if [[ "$ENI_COUNT" -eq 0 ]]; then
    echo "‚úÖ All ENIs deleted."
    exit 0
  else
    echo "‚è≥ $ENI_COUNT ENIs still present. Sleeping for 20s..."
    sleep 20
  fi
done

echo "‚ùå Timeout waiting for ENIs to be deleted."
exit 1




=============


#!/bin/bash

# Configuration
SECURITY_GROUP_NAME="$1"  # The security group name to filter ENIs
REGION="${AWS_REGION:-us-east-1}"  # Default to us-east-1 if not specified
CONFIRM=${2:-false}  # Whether to auto-confirm or prompt the user

# Check if Security Group Name is provided
if [ -z "$SECURITY_GROUP_NAME" ]; then
  echo "‚ùå Error: Security Group Name is required!"
  exit 1
fi

# 1. Get the Security Group ID from the given Security Group Name
SG_ID=$(aws ec2 describe-security-groups \
  --filters "Name=group-name,Values=$SECURITY_GROUP_NAME" \
  --region "$REGION" \
  --query 'SecurityGroups[0].GroupId' \
  --output text)

# Check if the Security Group exists
if [ "$SG_ID" == "None" ]; then
  echo "‚ùå Error: Security Group '$SECURITY_GROUP_NAME' not found in region '$REGION'."
  exit 1
fi

echo "‚úÖ Found Security Group ID: $SG_ID"

# 2. List ENIs associated with the given Security Group
echo "üîç Looking for ENIs associated with Security Group '$SECURITY_GROUP_NAME' (ID: $SG_ID) in region '$REGION'..."

ENI_IDS=$(aws ec2 describe-network-interfaces \
  --filters "Name=group-id,Values=$SG_ID" \
  --region "$REGION" \
  --query 'NetworkInterfaces[*].NetworkInterfaceId' \
  --output text)

# Check if ENIs are found
if [[ -z "$ENI_IDS" ]]; then
  echo "‚úÖ No ENIs found associated with the given security group. Exiting."
  exit 0
fi

echo "üîé Found the following ENIs: $ENI_IDS"

# 3. Ask for user input before deletion (if CONFIRM is not set to true)
if [[ "$CONFIRM" != "true" ]]; then
  echo "‚ö†Ô∏è Do you want to delete these ENIs? (y/n)"
  read -r USER_CONFIRM
  if [[ "$USER_CONFIRM" != "y" ]]; then
    echo "‚ùå Operation cancelled by the user."
    exit 1
  fi
fi

# 4. Delete the ENIs
for ENI_ID in $ENI_IDS; do
  echo "‚õî Deleting ENI: $ENI_ID..."
  aws ec2 delete-network-interface --network-interface-id "$ENI_ID" --region "$REGION"

  # Check if deletion was successful
  if [ $? -eq 0 ]; then
    echo "‚úÖ Successfully deleted ENI: $ENI_ID"
  else
    echo "‚ùå Failed to delete ENI: $ENI_ID"
  fi
done

echo "All selected ENIs have been processed."
